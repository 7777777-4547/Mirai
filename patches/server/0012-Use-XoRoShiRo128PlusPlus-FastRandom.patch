From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: etil2jz <blanchot.arthur@protonmail.ch>
Date: Fri, 4 Mar 2022 16:12:30 +0100
Subject: [PATCH] Use XoRoShiRo128PlusPlus FastRandom


diff --git a/build.gradle.kts b/build.gradle.kts
index f86e58bd58d6e1e05962e85fc3aa9ae4f7a178f8..b29b6d82c74df804968bf135af10f45dc002892e 100644
--- a/build.gradle.kts
+++ b/build.gradle.kts
@@ -40,6 +40,7 @@ dependencies {
     implementation("org.apache.logging.log4j:log4j-slf4j18-impl:2.17.1") // Paper
     implementation("org.ow2.asm:asm:9.2")
     implementation("org.ow2.asm:asm-commons:9.2") // Paper - ASM event executor generation
+    implementation("org.apache.commons:commons-rng-core:1.4") // Mirai - Use XoRoShiRo128PlusPlus FastRandom
     runtimeOnly("org.xerial:sqlite-jdbc:3.36.0.3")
     runtimeOnly("mysql:mysql-connector-java:8.0.27")
     runtimeOnly("com.lmax:disruptor:3.4.4") // Paper
diff --git a/src/main/java/com/destroystokyo/paper/loottable/PaperLootableInventoryData.java b/src/main/java/com/destroystokyo/paper/loottable/PaperLootableInventoryData.java
index 20cfe7b9b7127ddeb97aa91d759fc17b4a548eaf..cded257d28dee75aaeff6270cbf6b60e78158e8d 100644
--- a/src/main/java/com/destroystokyo/paper/loottable/PaperLootableInventoryData.java
+++ b/src/main/java/com/destroystokyo/paper/loottable/PaperLootableInventoryData.java
@@ -13,7 +13,7 @@ import java.util.UUID;
 
 public class PaperLootableInventoryData {
 
-    private static final Random RANDOM = new Random();
+    private static final Random RANDOM = new wtf.etil.mirai.server.util.FastRandom(); // Mirai
 
     private long lastFill = -1;
     private long nextRefill = -1;
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 461303a7752a6206513b410620142b3b3344a604..1ee5f5659ac30ecd119b80de5808a2e0a9c9586e 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -345,7 +345,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         this.onMetricsRecordingFinished = (path) -> {
         };
         this.status = new ServerStatus();
-        this.random = new Random();
+        this.random = new wtf.etil.mirai.server.util.FastRandom(); // Mirai
         this.port = -1;
         this.levels = Maps.newLinkedHashMap(); // CraftBukkit - keep order, k+v already use identity methods
         this.running = true;
@@ -580,7 +580,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
 
             if (worlddimension == null) {
                 holder = this.registryAccess().registryOrThrow(Registry.DIMENSION_TYPE_REGISTRY).getOrCreateHolder(DimensionType.OVERWORLD_LOCATION);
-                chunkgenerator = WorldGenSettings.makeDefaultOverworld(this.registryHolder, (new Random()).nextLong());
+                chunkgenerator = WorldGenSettings.makeDefaultOverworld(this.registryHolder, (new wtf.etil.mirai.server.util.FastRandom()).nextLong()); // Mirai
             } else {
                 holder = worlddimension.typeHolder();
                 chunkgenerator = worlddimension.generator();
@@ -717,7 +717,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
             ChunkPos chunkcoordintpair = new ChunkPos(chunkgenerator.climateSampler().findSpawnPosition());
             // CraftBukkit start
             if (world.generator != null) {
-                Random rand = new Random(world.getSeed());
+                Random rand = new wtf.etil.mirai.server.util.FastRandom(world.getSeed()); // Mirai
                 org.bukkit.Location spawn = world.generator.getFixedSpawnLocation(world.getWorld(), rand);
 
                 if (spawn != null) {
diff --git a/src/main/java/net/minecraft/server/commands/SpreadPlayersCommand.java b/src/main/java/net/minecraft/server/commands/SpreadPlayersCommand.java
index edc5b0fde13cecf1da371972bd040d7ca38a690b..a4d38a8f7d3ab03822f618612ce6a8c914bcc027 100644
--- a/src/main/java/net/minecraft/server/commands/SpreadPlayersCommand.java
+++ b/src/main/java/net/minecraft/server/commands/SpreadPlayersCommand.java
@@ -65,7 +65,7 @@ public class SpreadPlayersCommand {
         if (maxY < j) {
             throw SpreadPlayersCommand.ERROR_INVALID_MAX_HEIGHT.create(maxY, j);
         } else {
-            Random random = new Random();
+            Random random = new wtf.etil.mirai.server.util.FastRandom(); // Mirai
             double d0 = (double) (center.x - maxRange);
             double d1 = (double) (center.y - maxRange);
             double d2 = (double) (center.x + maxRange);
diff --git a/src/main/java/net/minecraft/server/level/ServerPlayer.java b/src/main/java/net/minecraft/server/level/ServerPlayer.java
index e74c13e7aaa144fcd07036de70e80bebf0be698a..c27f8953827b631afdff360e8cd64bbcb565d077 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayer.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayer.java
@@ -366,7 +366,7 @@ public class ServerPlayer extends Player {
             long l = k * k;
             int i1 = l > 2147483647L ? Integer.MAX_VALUE : (int) l;
             int j1 = this.getCoprime(i1);
-            int k1 = (new Random()).nextInt(i1);
+            int k1 = (new wtf.etil.mirai.server.util.FastRandom()).nextInt(i1); // Mirai
 
             for (int l1 = 0; l1 < i1; ++l1) {
                 int i2 = (k1 + j1 * l1) % i1;
@@ -403,7 +403,7 @@ public class ServerPlayer extends Player {
             long l = k * k;
             int i1 = l > 2147483647L ? Integer.MAX_VALUE : (int) l;
             int j1 = this.getCoprime(i1);
-            int k1 = (new Random()).nextInt(i1);
+            int k1 = (new wtf.etil.mirai.server.util.FastRandom()).nextInt(i1); // Mirai
 
             for (int l1 = 0; l1 < i1; ++l1) {
                 int i2 = (k1 + j1 * l1) % i1;
diff --git a/src/main/java/net/minecraft/server/network/ServerLoginPacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
index 0c4e34c02060c00bdbed6388989660ec023b4d1c..a3b22ccf75421a15f63909245a491580705a50b3 100644
--- a/src/main/java/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
@@ -48,7 +48,7 @@ public class ServerLoginPacketListenerImpl implements ServerLoginPacketListener
     private static final AtomicInteger UNIQUE_THREAD_ID = new AtomicInteger(0);
     static final Logger LOGGER = LogUtils.getLogger();
     private static final int MAX_TICKS_BEFORE_LOGIN = 600;
-    private static final Random RANDOM = new Random();
+    private static final Random RANDOM = new wtf.etil.mirai.server.util.FastRandom(); // Mirai
     private final byte[] nonce = new byte[4];
     final MinecraftServer server;
     public final Connection connection;
diff --git a/src/main/java/net/minecraft/server/rcon/thread/QueryThreadGs4.java b/src/main/java/net/minecraft/server/rcon/thread/QueryThreadGs4.java
index a17d40d20d86453cd4ff416cc748f703982891d9..7fe4570ab204cdc8f3bc89be36aba1f66831dc06 100644
--- a/src/main/java/net/minecraft/server/rcon/thread/QueryThreadGs4.java
+++ b/src/main/java/net/minecraft/server/rcon/thread/QueryThreadGs4.java
@@ -348,7 +348,7 @@ public class QueryThreadGs4 extends GenericThread {
             this.identBytes[2] = bs[5];
             this.identBytes[3] = bs[6];
             this.ident = new String(this.identBytes, StandardCharsets.UTF_8);
-            this.challenge = (new Random()).nextInt(16777216);
+            this.challenge = (new wtf.etil.mirai.server.util.FastRandom()).nextInt(16777216); // Mirai
             this.challengeBytes = String.format("\t%s%d\u0000", this.ident, this.challenge).getBytes(StandardCharsets.UTF_8);
         }
 
diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index 44c857b026d5944b3c97c46c58b46d96cc28c732..1baecb81b11cebec69f924ae95a181b55c6025e8 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -161,7 +161,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource, i
     }
 
     // Paper start
-    public static Random SHARED_RANDOM = new Random() {
+    public static Random SHARED_RANDOM = new wtf.etil.mirai.server.util.FastRandom() { // Mirai
         private boolean locked = false;
         @Override
         public synchronized void setSeed(long seed) {
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/ShufflingList.java b/src/main/java/net/minecraft/world/entity/ai/behavior/ShufflingList.java
index 62d404d9876c371f2c3e0fb749ab6cc8ec802ca7..0752830c027a7c2ffc8c15ef86d85dc92dae44a5 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/ShufflingList.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/ShufflingList.java
@@ -13,7 +13,7 @@ import java.util.stream.Stream;
 
 public class ShufflingList<U> {
     public final List<ShufflingList.WeightedEntry<U>> entries; // Paper - public
-    private final Random random = new Random();
+    private final Random random = new wtf.etil.mirai.server.util.FastRandom(); // Mirai
     private final boolean isUnsafe; // Paper
 
     public ShufflingList() {
diff --git a/src/main/java/net/minecraft/world/entity/ai/sensing/Sensor.java b/src/main/java/net/minecraft/world/entity/ai/sensing/Sensor.java
index 1dbe21a2bb6f7254d13842ead8084b801f881008..96a95be80bfa256bd2cf840c11a31f808a85f885 100644
--- a/src/main/java/net/minecraft/world/entity/ai/sensing/Sensor.java
+++ b/src/main/java/net/minecraft/world/entity/ai/sensing/Sensor.java
@@ -8,7 +8,7 @@ import net.minecraft.world.entity.ai.memory.MemoryModuleType;
 import net.minecraft.world.entity.ai.targeting.TargetingConditions;
 
 public abstract class Sensor<E extends LivingEntity> {
-    private static final Random RANDOM = new Random();
+    private static final Random RANDOM = new wtf.etil.mirai.server.util.FastRandom(); // Mirai
     private static final int DEFAULT_SCAN_RATE = 20;
     protected static final int TARGETING_RANGE = 16;
     private static final TargetingConditions TARGET_CONDITIONS = TargetingConditions.forNonCombat().range(16.0D);
diff --git a/src/main/java/net/minecraft/world/entity/monster/piglin/PiglinAi.java b/src/main/java/net/minecraft/world/entity/monster/piglin/PiglinAi.java
index 57f593e5f797d646ceb70fa61ec2e966cf4dabc1..463c614d4981ee69fe85e9eda2ce2d908034d744 100644
--- a/src/main/java/net/minecraft/world/entity/monster/piglin/PiglinAi.java
+++ b/src/main/java/net/minecraft/world/entity/monster/piglin/PiglinAi.java
@@ -373,7 +373,7 @@ public class PiglinAi {
     }
 
     private static boolean wantsToDance(LivingEntity piglin, LivingEntity target) {
-        return target.getType() != EntityType.HOGLIN ? false : (new Random(piglin.level.getGameTime())).nextFloat() < 0.1F;
+        return target.getType() != EntityType.HOGLIN ? false : (new wtf.etil.mirai.server.util.FastRandom(piglin.level.getGameTime())).nextFloat() < 0.1F; // Mirai
     }
 
     protected static boolean wantsToPickup(Piglin piglin, ItemStack stack) {
diff --git a/src/main/java/net/minecraft/world/entity/npc/WanderingTraderSpawner.java b/src/main/java/net/minecraft/world/entity/npc/WanderingTraderSpawner.java
index 4e478c30714a8e4cd95f02e73615d166836d1e4b..a3a86f64cf0acb2e51fc0de3f8c6ce18cae4bc16 100644
--- a/src/main/java/net/minecraft/world/entity/npc/WanderingTraderSpawner.java
+++ b/src/main/java/net/minecraft/world/entity/npc/WanderingTraderSpawner.java
@@ -35,7 +35,7 @@ public class WanderingTraderSpawner implements CustomSpawner {
     private static final int SPAWN_CHANCE_INCREASE = 25;
     private static final int SPAWN_ONE_IN_X_CHANCE = 10;
     private static final int NUMBER_OF_SPAWN_ATTEMPTS = 10;
-    private final Random random = new Random();
+    private final Random random = new wtf.etil.mirai.server.util.FastRandom(); // Mirai
     private final ServerLevelData serverLevelData;
     private int tickDelay;
     private int spawnDelay;
diff --git a/src/main/java/net/minecraft/world/entity/projectile/FishingHook.java b/src/main/java/net/minecraft/world/entity/projectile/FishingHook.java
index cc288174b22f959e8ef11e43f0ea4008bae7bdc5..c660ba6414395a4bce6add7412a53017255687a6 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/FishingHook.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/FishingHook.java
@@ -79,7 +79,7 @@ public class FishingHook extends Projectile {
 
     private FishingHook(EntityType<? extends FishingHook> type, Level world, int luckOfTheSeaLevel, int lureLevel) {
         super(type, world);
-        this.syncronizedRandom = new Random();
+        this.syncronizedRandom = new wtf.etil.mirai.server.util.FastRandom(); // Mirai
         this.openWater = true;
         this.currentState = FishingHook.FishHookState.FLYING;
         this.noCulling = true;
diff --git a/src/main/java/net/minecraft/world/entity/raid/Raid.java b/src/main/java/net/minecraft/world/entity/raid/Raid.java
index f50abfd058e3adf1cf8c0f4468a60bc04e8541e7..5b9e7a48d073e3415f596f49ca6589f951f07bbc 100644
--- a/src/main/java/net/minecraft/world/entity/raid/Raid.java
+++ b/src/main/java/net/minecraft/world/entity/raid/Raid.java
@@ -110,7 +110,7 @@ public class Raid {
 
     public Raid(int id, ServerLevel world, BlockPos pos) {
         this.raidEvent = new ServerBossEvent(Raid.RAID_NAME_COMPONENT, BossEvent.BossBarColor.RED, BossEvent.BossBarOverlay.NOTCHED_10);
-        this.random = new Random();
+        this.random = new wtf.etil.mirai.server.util.FastRandom(); // Mirai
         this.waveSpawnPos = Optional.empty();
         this.id = id;
         this.level = world;
@@ -124,7 +124,7 @@ public class Raid {
 
     public Raid(ServerLevel world, CompoundTag nbt) {
         this.raidEvent = new ServerBossEvent(Raid.RAID_NAME_COMPONENT, BossEvent.BossBarColor.RED, BossEvent.BossBarOverlay.NOTCHED_10);
-        this.random = new Random();
+        this.random = new wtf.etil.mirai.server.util.FastRandom(); // Mirai
         this.waveSpawnPos = Optional.empty();
         this.level = world;
         this.id = nbt.getInt("Id");
diff --git a/src/main/java/net/minecraft/world/inventory/EnchantmentMenu.java b/src/main/java/net/minecraft/world/inventory/EnchantmentMenu.java
index ea7b670aa6308bbe9919afced02a9067da20f0ce..ae7fa20a16a7ef0b00ddc98ae18024a88e8e3a5e 100644
--- a/src/main/java/net/minecraft/world/inventory/EnchantmentMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/EnchantmentMenu.java
@@ -72,7 +72,7 @@ public class EnchantmentMenu extends AbstractContainerMenu {
             }
             // CraftBukkit end
         };
-        this.random = new Random();
+        this.random = new wtf.etil.mirai.server.util.FastRandom(); // Mirai
         this.enchantmentSeed = DataSlot.standalone();
         this.costs = new int[3];
         this.enchantClue = new int[]{-1, -1, -1};
diff --git a/src/main/java/net/minecraft/world/level/BaseSpawner.java b/src/main/java/net/minecraft/world/level/BaseSpawner.java
index 4bfebbb2e87464cd47a38a5da6275b2c662fa052..8c73af0a5b730f2d98d1cb6c4faac0897c2557b3 100644
--- a/src/main/java/net/minecraft/world/level/BaseSpawner.java
+++ b/src/main/java/net/minecraft/world/level/BaseSpawner.java
@@ -41,7 +41,7 @@ public abstract class BaseSpawner {
     public int maxNearbyEntities = 6;
     public int requiredPlayerRange = 16;
     public int spawnRange = 4;
-    private final Random random = new Random();
+    private final Random random = new wtf.etil.mirai.server.util.FastRandom(); // Mirai
     private int tickDelay = 0; // Paper
 
     public BaseSpawner() {}
diff --git a/src/main/java/net/minecraft/world/level/Explosion.java b/src/main/java/net/minecraft/world/level/Explosion.java
index 29f6c10e2c2626a9726d295acf12efea2b463cd3..5dbf1811524e39870b17a5bcf827830beb68cb37 100644
--- a/src/main/java/net/minecraft/world/level/Explosion.java
+++ b/src/main/java/net/minecraft/world/level/Explosion.java
@@ -89,7 +89,7 @@ public class Explosion {
     }
 
     public Explosion(Level world, @Nullable Entity entity, @Nullable DamageSource damageSource, @Nullable ExplosionDamageCalculator behavior, double x, double y, double z, float power, boolean createFire, Explosion.BlockInteraction destructionType) {
-        this.random = new Random();
+        this.random = new wtf.etil.mirai.server.util.FastRandom(); // Mirai
         this.toBlow = Lists.newArrayList();
         this.hitPlayers = Maps.newHashMap();
         this.level = world;
diff --git a/src/main/java/net/minecraft/world/level/Level.java b/src/main/java/net/minecraft/world/level/Level.java
index 7b17359f558ac7bfbd14e902abc552c5a0658b91..236d46cdf5e598096702398cbb94ae208bce23eb 100644
--- a/src/main/java/net/minecraft/world/level/Level.java
+++ b/src/main/java/net/minecraft/world/level/Level.java
@@ -121,13 +121,13 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
     public final Thread thread;
     private final boolean isDebug;
     private int skyDarken;
-    protected int randValue = (new Random()).nextInt();
+    protected int randValue = (new wtf.etil.mirai.server.util.FastRandom()).nextInt(); // Mirai
     protected final int addend = 1013904223;
     protected float oRainLevel;
     public float rainLevel;
     protected float oThunderLevel;
     public float thunderLevel;
-    public final Random random = new Random();
+    public final Random random = new wtf.etil.mirai.server.util.FastRandom(); // Mirai
     final DimensionType dimensionType;
     private final Holder<DimensionType> dimensionTypeRegistration;
     public final WritableLevelData levelData;
diff --git a/src/main/java/net/minecraft/world/level/block/entity/DispenserBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/DispenserBlockEntity.java
index f74c5bb8e1ba42c77c59d481b871fd992483b128..661a94a0aec54f6b958b8c7e35ea59b710bfee7c 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/DispenserBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/DispenserBlockEntity.java
@@ -21,7 +21,7 @@ import org.bukkit.entity.HumanEntity;
 
 public class DispenserBlockEntity extends RandomizableContainerBlockEntity {
 
-    private static final Random RANDOM = new Random();
+    private static final Random RANDOM = new wtf.etil.mirai.server.util.FastRandom(); // Mirai
     public static final int CONTAINER_SIZE = 9;
     private NonNullList<ItemStack> items;
 
diff --git a/src/main/java/net/minecraft/world/level/block/entity/EnchantmentTableBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/EnchantmentTableBlockEntity.java
index f177c88d2a122a34b5c601fb8c0d15fb16925f6b..31c1122d0d2675bc2f5533abdc2e75fa182393b4 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/EnchantmentTableBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/EnchantmentTableBlockEntity.java
@@ -23,7 +23,7 @@ public class EnchantmentTableBlockEntity extends BlockEntity implements Nameable
     public float rot;
     public float oRot;
     public float tRot;
-    private static final Random RANDOM = new Random();
+    private static final Random RANDOM = new wtf.etil.mirai.server.util.FastRandom(); // Mirai
     private Component name;
 
     public EnchantmentTableBlockEntity(BlockPos pos, BlockState state) {
diff --git a/src/main/java/net/minecraft/world/level/block/entity/TheEndGatewayBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/TheEndGatewayBlockEntity.java
index 4e435a16a16c703a2978f4dc82606b8710742670..9bb15eaaa962e0b5ecdeb648943ac7673fe9cd2f 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/TheEndGatewayBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/TheEndGatewayBlockEntity.java
@@ -266,7 +266,7 @@ public class TheEndGatewayBlockEntity extends TheEndPortalBlockEntity {
         if (blockposition1 == null) {
             blockposition1 = new BlockPos(vec3d.x + 0.5D, 75.0D, vec3d.z + 0.5D);
             TheEndGatewayBlockEntity.LOGGER.debug("Failed to find a suitable block to teleport to, spawning an island on {}", blockposition1);
-            ((ConfiguredFeature) EndFeatures.END_ISLAND.value()).place(world, world.getChunkSource().getGenerator(), new Random(blockposition1.asLong()), blockposition1);
+            ((ConfiguredFeature) EndFeatures.END_ISLAND.value()).place(world, world.getChunkSource().getGenerator(), new wtf.etil.mirai.server.util.FastRandom(blockposition1.asLong()), blockposition1); // Mirai
         } else {
             TheEndGatewayBlockEntity.LOGGER.debug("Found suitable block to teleport to: {}", blockposition1);
         }
@@ -354,7 +354,7 @@ public class TheEndGatewayBlockEntity extends TheEndPortalBlockEntity {
     }
 
     private static void spawnGatewayPortal(ServerLevel world, BlockPos pos, EndGatewayConfiguration config) {
-        Feature.END_GATEWAY.place(config, world, world.getChunkSource().getGenerator(), new Random(), pos);
+        Feature.END_GATEWAY.place(config, world, world.getChunkSource().getGenerator(), new wtf.etil.mirai.server.util.FastRandom(), pos); // Mirai
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/chunk/ChunkGenerator.java b/src/main/java/net/minecraft/world/level/chunk/ChunkGenerator.java
index ab64f85de0051fdd4ff2eaa376eeabce2670b466..0f69f040b92aae8a93b5460f117e10f5ceaabae4 100644
--- a/src/main/java/net/minecraft/world/level/chunk/ChunkGenerator.java
+++ b/src/main/java/net/minecraft/world/level/chunk/ChunkGenerator.java
@@ -221,7 +221,7 @@ public abstract class ChunkGenerator implements BiomeManager.NoiseBiomeSource {
             int i = placement.distance();
             int j = placement.count();
             int k = placement.spread();
-            Random random = new Random();
+            Random random = new wtf.etil.mirai.server.util.FastRandom(); // Mirai
 
             // Paper start
             if (strongholdSet.is(net.minecraft.world.level.levelgen.structure.BuiltinStructureSets.STRONGHOLDS) && this.conf.strongholdSeed != null) {
diff --git a/src/main/java/net/minecraft/world/level/dimension/end/EndDragonFight.java b/src/main/java/net/minecraft/world/level/dimension/end/EndDragonFight.java
index bc0d0e6a367a0ca3c36e9eb37ec086dcbd9e6882..dca7f36b839938148f9d4cd8ee1c42339138e9cb 100644
--- a/src/main/java/net/minecraft/world/level/dimension/end/EndDragonFight.java
+++ b/src/main/java/net/minecraft/world/level/dimension/end/EndDragonFight.java
@@ -124,7 +124,7 @@ public class EndDragonFight {
             }
         } else {
             this.gateways.addAll(ContiguousSet.create(Range.closedOpen(0, 20), DiscreteDomain.integers()));
-            Collections.shuffle(this.gateways, new Random(gatewaysSeed));
+            Collections.shuffle(this.gateways, new wtf.etil.mirai.server.util.FastRandom(gatewaysSeed)); // Mirai
         }
 
         this.exitPortalPattern = BlockPatternBuilder.start().aisle("       ", "       ", "       ", "   #   ", "       ", "       ", "       ").aisle("       ", "       ", "       ", "   #   ", "       ", "       ", "       ").aisle("       ", "       ", "       ", "   #   ", "       ", "       ", "       ").aisle("  ###  ", " #   # ", "#     #", "#  #  #", "#     #", " #   # ", "  ###  ").aisle("       ", "  ###  ", " ##### ", " ##### ", " ##### ", "  ###  ", "       ").where('#', BlockInWorld.hasState(BlockPredicate.forBlock(Blocks.BEDROCK))).build();
@@ -402,7 +402,7 @@ public class EndDragonFight {
 
     private void spawnNewGateway(BlockPos pos) {
         this.level.levelEvent(3000, pos, 0);
-        EndFeatures.END_GATEWAY_DELAYED.value().place(this.level, this.level.getChunkSource().getGenerator(), new Random(), pos);
+        EndFeatures.END_GATEWAY_DELAYED.value().place(this.level, this.level.getChunkSource().getGenerator(), new wtf.etil.mirai.server.util.FastRandom(), pos); // Mirai
     }
 
     public void spawnExitPortal(boolean previouslyKilled) {
@@ -417,7 +417,7 @@ public class EndDragonFight {
             this.portalLocation = this.portalLocation.atY(this.level.getMinBuildHeight() + 1);
         }
         // Paper end
-        endPodiumFeature.place(FeatureConfiguration.NONE, this.level, this.level.getChunkSource().getGenerator(), new Random(), this.portalLocation);
+        endPodiumFeature.place(FeatureConfiguration.NONE, this.level, this.level.getChunkSource().getGenerator(), new wtf.etil.mirai.server.util.FastRandom(), this.portalLocation); // Mirai
     }
 
     private EnderDragon createNewDragon() {
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/SpikeFeature.java b/src/main/java/net/minecraft/world/level/levelgen/feature/SpikeFeature.java
index f1de8ff4dbebfadb5d402bfad944a8cfa1279bdd..130efded60977456e3e1eb0df3e9819696e09767 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/SpikeFeature.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/SpikeFeature.java
@@ -36,7 +36,7 @@ public class SpikeFeature extends Feature<SpikeConfiguration> {
     }
 
     public static List<SpikeFeature.EndSpike> getSpikesForLevel(WorldGenLevel world) {
-        Random random = new Random(world.getSeed());
+        Random random = new wtf.etil.mirai.server.util.FastRandom(world.getSeed()); // Mirai
         long l = random.nextLong() & 65535L;
         return SPIKE_CACHE.getUnchecked(l);
     }
@@ -167,7 +167,7 @@ public class SpikeFeature extends Feature<SpikeConfiguration> {
         @Override
         public List<SpikeFeature.EndSpike> load(Long long_) {
             List<Integer> list = IntStream.range(0, 10).boxed().collect(Collectors.toList());
-            Collections.shuffle(list, new Random(long_));
+            Collections.shuffle(list, new wtf.etil.mirai.server.util.FastRandom(long_)); // Mirai
             List<SpikeFeature.EndSpike> list2 = Lists.newArrayList();
 
             for(int i = 0; i < 10; ++i) {
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/StructurePlaceSettings.java b/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/StructurePlaceSettings.java
index c75141f96bdbee9ec070e81bd4f1ce0e7f1054fa..db6a068743bf167c6c344c71c99d5b5acb991e05 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/StructurePlaceSettings.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/StructurePlaceSettings.java
@@ -120,7 +120,7 @@ public class StructurePlaceSettings {
     }
 
     public Random getRandom(@Nullable BlockPos pos) {
-        return this.random != null ? this.random : (pos == null ? new Random(Util.getMillis()) : new Random(Mth.getSeed(pos)));
+        return this.random != null ? this.random : (pos == null ? new wtf.etil.mirai.server.util.FastRandom(Util.getMillis()) : new wtf.etil.mirai.server.util.FastRandom(Mth.getSeed(pos))); // Mirai
     }
 
     public boolean isIgnoreEntities() {
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/LootContext.java b/src/main/java/net/minecraft/world/level/storage/loot/LootContext.java
index 3bc8d37590698c17eab876cffdda78bb1bf0e917..d3bb70a4e155d67704b4cfc24c9321ec78b679dc 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/LootContext.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/LootContext.java
@@ -127,7 +127,7 @@ public class LootContext {
 
         public LootContext.Builder withOptionalRandomSeed(long seed) {
             if (seed != 0L) {
-                this.random = new Random(seed);
+                this.random = new wtf.etil.mirai.server.util.FastRandom(seed); // Mirai
             }
 
             return this;
@@ -137,7 +137,7 @@ public class LootContext {
             if (seed == 0L) {
                 this.random = random;
             } else {
-                this.random = new Random(seed);
+                this.random = new wtf.etil.mirai.server.util.FastRandom(seed); // Mirai
             }
 
             return this;
@@ -201,7 +201,7 @@ public class LootContext {
                 } else {
                     Random random = this.random;
                     if (random == null) {
-                        random = new Random();
+                        random = new wtf.etil.mirai.server.util.FastRandom(); // Mirai
                     }
 
                     MinecraftServer minecraftServer = this.level.getServer();
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 83839f6e84956777f5ab917c1f025fabcdd73103..3030a17fbb71d53e63c8633efbb584a0504e671b 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -1212,7 +1212,7 @@ public final class CraftServer implements Server {
 
         if (worlddimension == null) {
             holder = console.registryHolder.registryOrThrow(Registry.DIMENSION_TYPE_REGISTRY).getOrCreateHolder(DimensionType.OVERWORLD_LOCATION);
-            chunkgenerator = WorldGenSettings.makeDefaultOverworld(console.registryHolder, (new Random()).nextLong());
+            chunkgenerator = WorldGenSettings.makeDefaultOverworld(console.registryHolder, (new wtf.etil.mirai.server.util.FastRandom()).nextLong()); // Mirai
         } else {
             holder = worlddimension.typeHolder();
             chunkgenerator = worlddimension.generator();
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
index 028663b86970b8a1ae3e5275429516ee00ef0a04..3c839ce12e8d19e339df8b63136e81dccfd01088 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
@@ -239,7 +239,7 @@ public class CraftWorld extends CraftRegionAccessor implements World {
     }
     // Paper end
 
-    private static final Random rand = new Random();
+    private static final Random rand = new wtf.etil.mirai.server.util.FastRandom(); // Mirai
 
     public CraftWorld(ServerLevel world, ChunkGenerator gen, BiomeProvider biomeProvider, Environment env) {
         this.world = world;
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftFirework.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftFirework.java
index be86114eac3975b82ca74d4d6ed3f0402a642e8a..70497b92ea5107d585b4818a63edd97f4316970e 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftFirework.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftFirework.java
@@ -13,7 +13,7 @@ import org.bukkit.inventory.meta.FireworkMeta;
 
 public class CraftFirework extends CraftProjectile implements Firework {
 
-    private final Random random = new Random();
+    private final Random random = new wtf.etil.mirai.server.util.FastRandom(); // Mirai
     private final CraftItemStack item;
 
     public CraftFirework(CraftServer server, FireworkRocketEntity entity) {
diff --git a/src/main/java/org/bukkit/craftbukkit/generator/CustomChunkGenerator.java b/src/main/java/org/bukkit/craftbukkit/generator/CustomChunkGenerator.java
index 8acf48ecc9217556bd5aaf47e33df284254a8221..7da70ab955230b44cd262e6b13dbfb57397e737b 100644
--- a/src/main/java/org/bukkit/craftbukkit/generator/CustomChunkGenerator.java
+++ b/src/main/java/org/bukkit/craftbukkit/generator/CustomChunkGenerator.java
@@ -45,7 +45,7 @@ public class CustomChunkGenerator extends InternalChunkGenerator {
     public final net.minecraft.world.level.chunk.ChunkGenerator delegate;
     private final ChunkGenerator generator;
     private final ServerLevel world;
-    private final Random random = new Random();
+    private final Random random = new wtf.etil.mirai.server.util.FastRandom(); // Mirai
     private boolean newApi;
     private boolean implementBaseHeight = true;
 
diff --git a/src/main/java/wtf/etil/mirai/server/util/FastRandom.java b/src/main/java/wtf/etil/mirai/server/util/FastRandom.java
new file mode 100644
index 0000000000000000000000000000000000000000..24527b27091930ad76a290f74b800c332d1abfad
--- /dev/null
+++ b/src/main/java/wtf/etil/mirai/server/util/FastRandom.java
@@ -0,0 +1,64 @@
+package wtf.etil.mirai.server.util;
+
+import org.apache.commons.rng.core.source64.XoRoShiRo128PlusPlus;
+
+import java.util.Random;
+import java.util.SplittableRandom;
+
+public class FastRandom extends Random {
+
+    private XoRoShiRo128PlusPlus random;
+
+    public FastRandom() {
+        super();
+        SplittableRandom randomseed = new SplittableRandom();
+        this.random = new XoRoShiRo128PlusPlus(randomseed.nextLong(), randomseed.nextLong());
+    }
+
+    public FastRandom(long seed) {
+        super(seed);
+        SplittableRandom randomseed = new SplittableRandom(seed);
+        this.random = new XoRoShiRo128PlusPlus(randomseed.nextLong(), randomseed.nextLong());
+    }
+
+    @Override
+    public boolean nextBoolean() {
+        return random.nextBoolean();
+    }
+
+    @Override
+    public int nextInt() {
+        return random.nextInt();
+    }
+
+    @Override
+    public float nextFloat() {
+        return (float) random.nextDouble();
+    }
+
+    @Override
+    public double nextDouble() {
+        return random.nextDouble();
+    }
+
+    @Override
+    public synchronized void setSeed(long seed) {
+        SplittableRandom randomseed = new SplittableRandom(seed);
+        this.random = new XoRoShiRo128PlusPlus(randomseed.nextLong(), randomseed.nextLong());
+    }
+
+    @Override
+    public void nextBytes(byte[] bytes) {
+        random.nextBytes(bytes);
+    }
+
+    @Override
+    public int nextInt(int bound) {
+        return random.nextInt(bound);
+    }
+
+    @Override
+    public long nextLong() {
+        return random.nextLong();
+    }
+}
\ No newline at end of file
