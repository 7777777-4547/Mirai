From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Etil <81570777+etil2jz@users.noreply.github.com>
Date: Fri, 12 Nov 2021 20:27:06 +0100
Subject: [PATCH] Purpur Patches


diff --git a/src/main/java/com/destroystokyo/paper/gui/RAMDetails.java b/src/main/java/com/destroystokyo/paper/gui/RAMDetails.java
index fa56cd09102a89692b42f1d14257990508c5c720..f9251183df72ddc56662fd3f02acf21641a2200c 100644
--- a/src/main/java/com/destroystokyo/paper/gui/RAMDetails.java
+++ b/src/main/java/com/destroystokyo/paper/gui/RAMDetails.java
@@ -58,7 +58,7 @@ public class RAMDetails extends JList<String> {
         GraphData data = RAMGraph.DATA.peekLast();
         Vector<String> vector = new Vector<>();
 
-        double[] tps = new double[] {server.tps1.getAverage(), server.tps5.getAverage(), server.tps15.getAverage()};
+        double[] tps = new double[] {server.tps5s.getAverage(), server.tps1.getAverage(), server.tps5.getAverage(), server.tps15.getAverage()}; // Purpur
         String[] tpsAvg = new String[tps.length];
 
         for ( int g = 0; g < tps.length; g++) {
@@ -67,7 +67,7 @@ public class RAMDetails extends JList<String> {
         vector.add("Memory use: " + (data.getUsedMem() / 1024L / 1024L) + " mb (" + (data.getFree() * 100L / data.getMax()) + "% free)");
         vector.add("Heap: " + (data.getTotal() / 1024L / 1024L) + " / " + (data.getMax() / 1024L / 1024L) + " mb");
         vector.add("Avg tick: " + DECIMAL_FORMAT.format(getAverage(server.tickTimes)) + " ms");
-        vector.add("TPS from last 1m, 5m, 15m: " + String.join(", ", tpsAvg));
+        vector.add("TPS from last 5s, 1m, 5m, 15m: " + String.join(", ", tpsAvg)); // Purpur
 
         setListData(vector);
     }
diff --git a/src/main/java/com/mojang/brigadier/tree/CommandNode.java b/src/main/java/com/mojang/brigadier/tree/CommandNode.java
index f64aa22ed6fcb4af67317b99f459ee5296392548..63af2216c383aef0809dd381b69493ec99be5d32 100644
--- a/src/main/java/com/mojang/brigadier/tree/CommandNode.java
+++ b/src/main/java/com/mojang/brigadier/tree/CommandNode.java
@@ -34,6 +34,7 @@ public abstract class CommandNode<S> implements Comparable<CommandNode<S>> {
     private final RedirectModifier<S> modifier;
     private final boolean forks;
     private Command<S> command;
+	private String permission = null; public String getPermission() { return permission; } public void setPermission(String permission) { this.permission = permission; } // Purpur
     // CraftBukkit start
     public void removeCommand(String name) {
         this.children.remove(name);
diff --git a/src/main/java/net/minecraft/commands/Commands.java b/src/main/java/net/minecraft/commands/Commands.java
index 065bd28349982bb7af97182c6cecff43c714bf65..5770e7694791b223c19674143b21e096fc024401 100644
--- a/src/main/java/net/minecraft/commands/Commands.java
+++ b/src/main/java/net/minecraft/commands/Commands.java
@@ -386,18 +386,20 @@ public class Commands {
     }
 
     private void runSync(ServerPlayer player, Collection<String> bukkit, RootCommandNode<SharedSuggestionProvider> rootcommandnode) {
-        // Paper end - Async command map building
-        new com.destroystokyo.paper.event.brigadier.AsyncPlayerSendCommandsEvent<CommandSourceStack>(player.getBukkitEntity(), (RootCommandNode) rootcommandnode, false).callEvent(); // Paper
-        PlayerCommandSendEvent event = new PlayerCommandSendEvent(player.getBukkitEntity(), new LinkedHashSet<>(bukkit));
-        event.getPlayer().getServer().getPluginManager().callEvent(event);
-
-        // Remove labels that were removed during the event
-        for (String orig : bukkit) {
-            if (!event.getCommands().contains(orig)) {
-                rootcommandnode.removeCommand(orig);
-            }
-        }
-        // CraftBukkit end
+        if (PlayerCommandSendEvent.getHandlerList().getRegisteredListeners().length > 0) { // Purpur - skip all this crap if there's nothing listening
+			// Paper end - Async command map building
+			new com.destroystokyo.paper.event.brigadier.AsyncPlayerSendCommandsEvent<CommandSourceStack>(player.getBukkitEntity(), (RootCommandNode) rootcommandnode, false).callEvent(); // Paper
+			PlayerCommandSendEvent event = new PlayerCommandSendEvent(player.getBukkitEntity(), new LinkedHashSet<>(bukkit));
+			event.getPlayer().getServer().getPluginManager().callEvent(event);
+
+			// Remove labels that were removed during the event
+			for (String orig : bukkit) {
+				if (!event.getCommands().contains(orig)) {
+					rootcommandnode.removeCommand(orig);
+				}
+			}
+			// CraftBukkit end
+		} // Purpur - skip event
         player.connection.send(new ClientboundCommandsPacket(rootcommandnode));
     }
 
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 3d23dc1bebe66ceb00dd2937befdd2a015dacaa5..90a89a686dbba6ffad1733dade0b8bc45091a69f 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -305,7 +305,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<Runnab
     public static final int TPS = 20;
     public static final int TICK_TIME = 1000000000 / MinecraftServer.TPS;
     private static final int SAMPLE_INTERVAL = 20; // Paper
-    public final double[] recentTps = new double[ 3 ];
+    public final double[] recentTps = new double[ 4 ]; // Purpur
     public final SlackActivityAccountant slackActivityAccountant = new SlackActivityAccountant();
     // Spigot end
     public static long currentTickLong = 0L; // Paper
@@ -1170,6 +1170,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<Runnab
     private static final long MAX_CATCHUP_BUFFER = TICK_TIME * TPS * 60L;
     private long lastTick = 0;
     private long catchupTime = 0;
+	public final RollingAverage tps5s = new RollingAverage(5); // Purpur
     public final RollingAverage tps1 = new RollingAverage(60);
     public final RollingAverage tps5 = new RollingAverage(60 * 5);
     public final RollingAverage tps15 = new RollingAverage(60 * 15);
@@ -1261,13 +1262,17 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<Runnab
                     {
                         final long diff = curTime - tickSection;
                         java.math.BigDecimal currentTps = TPS_BASE.divide(new java.math.BigDecimal(diff), 30, java.math.RoundingMode.HALF_UP);
+						tps5s.add(currentTps, diff); // Purpur
                         tps1.add(currentTps, diff);
                         tps5.add(currentTps, diff);
                         tps15.add(currentTps, diff);
                         // Backwards compat with bad plugins
-                        this.recentTps[0] = tps1.getAverage();
-                        this.recentTps[1] = tps5.getAverage();
-                        this.recentTps[2] = tps15.getAverage();
+                        // Purpur start
+                        this.recentTps[0] = tps5s.getAverage();
+                        this.recentTps[1] = tps1.getAverage();
+                        this.recentTps[2] = tps5.getAverage();
+                        this.recentTps[3] = tps15.getAverage();
+                        // Purpur end
                         // Paper end
                         tickSection = curTime;
                     }
diff --git a/src/main/java/net/minecraft/server/PlayerAdvancements.java b/src/main/java/net/minecraft/server/PlayerAdvancements.java
index f7959fe8d5247504dd79a18010470d98781c7cfe..351bf7fcd607046e31488f3ae55cc32fc7df780b 100644
--- a/src/main/java/net/minecraft/server/PlayerAdvancements.java
+++ b/src/main/java/net/minecraft/server/PlayerAdvancements.java
@@ -186,6 +186,7 @@ public class PlayerAdvancements {
                         if (advancement == null) {
                             // CraftBukkit start
                             if (entry.getKey().getNamespace().equals("minecraft")) {
+								if (!wtf.etil.mirai.MiraiConfig.loggerSuppressIgnoredAdvancementWarnings) // Purpur
                                 PlayerAdvancements.LOGGER.warn("Ignored advancement '{}' in progress file {} - it doesn't exist anymore?", entry.getKey(), this.file);
                             }
                             // CraftBukkit end
diff --git a/src/main/java/net/minecraft/server/level/ServerEntity.java b/src/main/java/net/minecraft/server/level/ServerEntity.java
index a453aac607f9b38f0bf90038ff2d8071687c4bae..96b11907d99e058041e81a29f8727465e3fa6723 100644
--- a/src/main/java/net/minecraft/server/level/ServerEntity.java
+++ b/src/main/java/net/minecraft/server/level/ServerEntity.java
@@ -190,6 +190,7 @@ public class ServerEntity {
                         this.teleportDelay = 0;
                         packet1 = new ClientboundTeleportEntityPacket(this.entity);
                     }
+					if (wtf.etil.mirai.MiraiConfig.dontSendUselessEntityPackets && isUselessPacket(packet1)) packet1 = null; // Purpur
                 }
 
                 if ((this.trackDelta || this.entity.hasImpulse || this.entity instanceof LivingEntity && ((LivingEntity) this.entity).isFallFlying()) && this.tickCount > 0) {
@@ -257,6 +258,22 @@ public class ServerEntity {
         }
 
     }
+	
+	// Purpur start
+    private boolean isUselessPacket(Packet<?> possibleUselessPacket) {
+        if (possibleUselessPacket instanceof ClientboundMoveEntityPacket) {
+            ClientboundMoveEntityPacket packet = (ClientboundMoveEntityPacket) possibleUselessPacket;
+            if (possibleUselessPacket instanceof ClientboundMoveEntityPacket.Pos) {
+                return packet.getXa() == 0 && packet.getYa() == 0 && packet.getZa() == 0;
+            } else if (possibleUselessPacket instanceof ClientboundMoveEntityPacket.PosRot) {
+                return packet.getXa() == 0 && packet.getYa() == 0 && packet.getZa() == 0 && packet.getyRot() == 0 && packet.getxRot() == 0;
+            } else if (possibleUselessPacket instanceof ClientboundMoveEntityPacket.Rot) {
+                return packet.getyRot() == 0 && packet.getxRot() == 0;
+            }
+        }
+        return false;
+    }
+    // Purpur end
 
     public void removePairing(ServerPlayer player) {
         this.entity.stopSeenByPlayer(player);
diff --git a/src/main/java/net/minecraft/server/level/ServerPlayer.java b/src/main/java/net/minecraft/server/level/ServerPlayer.java
index 5635b7fbfbc27e2042eaf4af1fe139bde514e7ab..24a8c047b717c26b6efb4cd67c061527bc6c9cd4 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayer.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayer.java
@@ -1111,6 +1111,7 @@ public class ServerPlayer extends Player {
                 playerlist.sendPlayerPermissionLevel(this);
                 worldserver1.removePlayerImmediately(this, Entity.RemovalReason.CHANGED_DIMENSION);
                 this.unsetRemoved();
+				this.portalPos = net.minecraft.server.MCUtil.toBlockPosition(exit); // Purpur
 
                 // CraftBukkit end
                 this.setLevel(worldserver);
diff --git a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
index 209509622e9b19538627a11a7a205a35d6cc41b1..21903a06334a9f7a25fddf838e67df1d2c4cd27a 100644
--- a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
@@ -228,6 +228,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Ser
     private long keepAliveTime = Util.getMillis();
     private boolean keepAlivePending;
     private long keepAliveChallenge;
+	private java.util.List<Long> keepAlives = new java.util.ArrayList<>(); // Purpur
     // CraftBukkit start - multithreaded fields
     private AtomicInteger chatSpamTickCount = new AtomicInteger();
     private final java.util.concurrent.atomic.AtomicInteger tabSpamLimiter = new java.util.concurrent.atomic.AtomicInteger(); // Paper - configurable tab spam limits
@@ -358,6 +359,21 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Ser
         long currentTime = Util.getMillis();
         long elapsedTime = currentTime - this.keepAliveTime;
 
+		// Purpur start
+        if (wtf.etil.mirai.MiraiConfig.useAlternateKeepAlive) {
+            if (elapsedTime >= 1000L) { // 1 second
+                if (!processedDisconnect && keepAlives.size() > KEEPALIVE_LIMIT) {
+                    LOGGER.warn("{} was kicked due to keepalive timeout!", player.getName());
+                    disconnect(new TranslatableComponent("disconnect.timeout"));
+                } else {
+                    keepAliveTime = currentTime; // hijack this field for 1 second intervals
+                    keepAlives.add(currentTime); // currentTime is ID
+                    send(new ClientboundKeepAlivePacket(currentTime));
+                }
+            }
+        } else
+        // Purpur end
+
         if (this.keepAlivePending) {
             if (!this.processedDisconnect && elapsedTime >= KEEPALIVE_LIMIT) { // check keepalive limit, don't fire if already disconnected
                 ServerGamePacketListenerImpl.LOGGER.warn("{} was kicked due to keepalive timeout!", this.player.getScoreboardName()); // more info
@@ -3077,6 +3093,16 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Ser
 
     @Override
     public void handleKeepAlive(ServerboundKeepAlivePacket packet) {
+		// Purpur start
+        if (wtf.etil.mirai.MiraiConfig.useAlternateKeepAlive) {
+            long id = packet.getId();
+            if (keepAlives.size() > 0 && keepAlives.contains(id)) {
+                int ping = (int) (Util.getMillis() - id);
+                player.latency = (player.latency * 3 + ping) / 4;
+                keepAlives.clear(); // we got a valid response, lets roll with it and forget the rest
+            }
+        } else
+        // Purpur end
         //PlayerConnectionUtils.ensureMainThread(packetplayinkeepalive, this, this.player.getWorldServer()); // CraftBukkit // Paper - This shouldn't be on the main thread
         if (this.keepAlivePending && packet.getId() == this.keepAliveChallenge) {
             int i = (int) (Util.getMillis() - this.keepAliveTime);
diff --git a/src/main/java/net/minecraft/server/network/ServerStatusPacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerStatusPacketListenerImpl.java
index d65191a50349ec86fe35df4ac1070f94fbb77b4c..84344527d2141b227f8881ea95ed545a20e14c65 100644
--- a/src/main/java/net/minecraft/server/network/ServerStatusPacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerStatusPacketListenerImpl.java
@@ -145,6 +145,7 @@ public class ServerStatusPacketListenerImpl implements ServerStatusPacketListene
 
             this.connection.send(new ClientboundStatusResponsePacket(ping));
             */
+			if (this.server.getStatus().getVersion() == null) return; // Purpur - do not respond to pings before we know the protocol version
             com.destroystokyo.paper.network.StandardPaperServerListPingEventImpl.processRequest(this.server, this.connection);
             // Paper end
         }
diff --git a/src/main/java/net/minecraft/server/players/PlayerList.java b/src/main/java/net/minecraft/server/players/PlayerList.java
index 7a864ead3864886064f53f285b33af8ae0369e88..4caef00726f3e421cec2ef955c3db8d074348c49 100644
--- a/src/main/java/net/minecraft/server/players/PlayerList.java
+++ b/src/main/java/net/minecraft/server/players/PlayerList.java
@@ -1022,22 +1022,21 @@ public abstract class PlayerList {
     }
 
     public void tick() {
-        if (++this.sendAllPlayerInfoIn > 600) {
-            // CraftBukkit start
-            for (int i = 0; i < this.players.size(); ++i) {
-                final ServerPlayer target = (ServerPlayer) this.players.get(i);
-
-                target.connection.send(new ClientboundPlayerInfoPacket(ClientboundPlayerInfoPacket.Action.UPDATE_LATENCY, this.players.stream().filter(new Predicate<ServerPlayer>() {
-                    @Override
-                    public boolean apply(ServerPlayer input) {
-                        return target.getBukkitEntity().canSee(input.getBukkitEntity());
-                    }
-                }).collect(Collectors.toList())));
+        // Purpur start
+        if (this.sendAllPlayerInfoIn < this.players.size()) {
+            final org.bukkit.craftbukkit.entity.CraftPlayer target = this.players.get(this.sendAllPlayerInfoIn).getBukkitEntity();
+            final List<ServerPlayer> list = new java.util.ArrayList<>();
+            for (ServerPlayer player : this.players) {
+                if (target.canSee(player.getUUID())) {
+                    list.add(player);
+                }
             }
-            // CraftBukkit end
+            target.getHandle().connection.send(new ClientboundPlayerInfoPacket(ClientboundPlayerInfoPacket.Action.UPDATE_LATENCY, list));
+		}
+		if (++this.sendAllPlayerInfoIn > 600) {
             this.sendAllPlayerInfoIn = 0;
         }
-
+		// Purpur end
     }
 
     public void broadcastAll(Packet<?> packet) {
diff --git a/src/main/java/net/minecraft/stats/ServerRecipeBook.java b/src/main/java/net/minecraft/stats/ServerRecipeBook.java
index 63a4fa2408edf84b490ca39e824977135d78eff0..fc0f4055cc8f681e6040c64396c847d8802fb1ac 100644
--- a/src/main/java/net/minecraft/stats/ServerRecipeBook.java
+++ b/src/main/java/net/minecraft/stats/ServerRecipeBook.java
@@ -122,6 +122,7 @@ public class ServerRecipeBook extends RecipeBook {
                 Optional<? extends Recipe<?>> optional = recipeManager.byKey(minecraftkey);
 
                 if (!optional.isPresent()) {
+					if (!wtf.etil.mirai.MiraiConfig.loggerSuppressUnrecognizedRecipeErrors) // Purpur
                     ServerRecipeBook.LOGGER.error("Tried to load unrecognized recipe: {} removed now.", minecraftkey);
                 } else {
                     handler.accept((Recipe) optional.get());
diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index 8572412803738bb9ff31d07c470cd19b7ccd085f..4e5a8be29816b96ce1738e6cedffd99b00909036 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -1772,6 +1772,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource, n
         this.yRotO = this.getYRot();
         this.xRotO = this.getXRot();
         this.setYHeadRot(yaw); // Paper - Update head rotation
+		if (valid && !this.isRemoved()) level.getChunk((int) Math.floor(this.getX()) >> 4, (int) Math.floor(this.getZ()) >> 4); // CraftBukkit // Paper // Purpur
     }
 
     public void absMoveTo(double x, double y, double z) {
@@ -2717,12 +2718,15 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource, n
         return Vec3.directionFromRotation(this.getRotationVector());
     }
 
-    public void handleInsidePortal(BlockPos pos) {
+    public BlockPos portalPos = BlockPos.ZERO; // Purpur
+	public void handleInsidePortal(BlockPos pos) {
         if (this.isOnPortalCooldown()) {
-            this.setPortalCooldown();
-        } else {
+            if (!(wtf.etil.mirai.MiraiConfig.playerFixStuckPortal && this instanceof Player && !pos.equals(portalPos))) // Purpur
+			this.setPortalCooldown();
+        } else if (wtf.etil.mirai.MiraiConfig.entitiesCanUsePortals || this instanceof ServerPlayer) { // Purpur
             if (!this.level.isClientSide && !pos.equals(this.portalEntrancePos)) {
                 this.portalEntrancePos = pos.immutable();
+				portalPos = BlockPos.ZERO; // Purpur
             }
 
             this.isInsidePortal = true;
@@ -3371,7 +3375,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource, n
     }
 
     public boolean canChangeDimensions() {
-        return isAlive() && valid; // Paper
+        return isAlive() && valid && (wtf.etil.mirai.MiraiConfig.entitiesCanUsePortals || this instanceof ServerPlayer); // Paper // Purpur
     }
 
     public float getBlockExplosionResistance(Explosion explosion, BlockGetter world, BlockPos pos, BlockState blockState, FluidState fluidState, float max) {
@@ -3853,12 +3857,18 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource, n
         this.xRotO = this.getXRot();
         this.yRotO = this.getYRot();
     }
+	
+	// Purpur start
+    public AABB getAxisForFluidCheck() {
+        return this.getBoundingBox().deflate(0.001D);
+    }
+    // Purpur end
 
     public boolean updateFluidHeightAndDoFluidPushing(Tag<Fluid> tag, double d0) {
         if (false && this.touchingUnloadedChunk()) { // Airplane - cost of a lookup here is the same cost as below, so skip
             return false;
         } else {
-            AABB axisalignedbb = this.getBoundingBox().deflate(0.001D);
+            AABB axisalignedbb = getAxisForFluidCheck(); // Purpur
             // Airplane start - rename
             int minBlockX = Mth.floor(axisalignedbb.minX);
             int maxBlockX = Mth.ceil(axisalignedbb.maxX);
diff --git a/src/main/java/net/minecraft/world/entity/LivingEntity.java b/src/main/java/net/minecraft/world/entity/LivingEntity.java
index 926204633911f68c8437f11404b90de1c446fda7..8576d7f4acba258a9d42218e7d50cc3067236b52 100644
--- a/src/main/java/net/minecraft/world/entity/LivingEntity.java
+++ b/src/main/java/net/minecraft/world/entity/LivingEntity.java
@@ -2905,7 +2905,7 @@ public abstract class LivingEntity extends Entity {
             }
         }
 
-        this.aiStep();
+        if (!this.isRemoved()) this.aiStep(); // Purpur
         double d0 = this.getX() - this.xo;
         double d1 = this.getZ() - this.zo;
         float f = (float) (d0 * d0 + d1 * d1);
diff --git a/src/main/java/net/minecraft/world/entity/animal/MushroomCow.java b/src/main/java/net/minecraft/world/entity/animal/MushroomCow.java
index b2765fba362e5f6d641abcc9ee7ccc177db08eb5..a9f5d9f3ce379bb8519a6114c4962859a159c46c 100644
--- a/src/main/java/net/minecraft/world/entity/animal/MushroomCow.java
+++ b/src/main/java/net/minecraft/world/entity/animal/MushroomCow.java
@@ -177,7 +177,13 @@ public class MushroomCow extends Cow implements Shearable {
 
             entitycow.moveTo(this.getX(), this.getY(), this.getZ(), this.getYRot(), this.getXRot());
             entitycow.setHealth(this.getHealth());
-            entitycow.yBodyRot = this.yBodyRot;
+            // Purpur start
+			entitycow.copyPosition(this);
+			entitycow.yBodyRot = this.yBodyRot;
+			entitycow.setYHeadRot(this.getYHeadRot());
+			entitycow.yRotO = this.yRotO;
+			entitycow.xRotO = this.xRotO;
+			// Purpur end
             if (this.hasCustomName()) {
                 entitycow.setCustomName(this.getCustomName());
                 entitycow.setCustomNameVisible(this.isCustomNameVisible());
diff --git a/src/main/java/net/minecraft/world/entity/animal/Squid.java b/src/main/java/net/minecraft/world/entity/animal/Squid.java
index 4da560f6e4da0750bda78b900b2d916d58adfccb..c3aed0f2aceadc22376c537c599453536bc0fa7d 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Squid.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Squid.java
@@ -327,4 +327,11 @@ public class Squid extends WaterAnimal {
             }
         }
     }
+	
+	@Override
+    public net.minecraft.world.phys.AABB getAxisForFluidCheck() {
+        // Stops squids from floating just over the water
+        return super.getAxisForFluidCheck().offsetY(wtf.etil.mirai.MiraiConfig.squidOffsetWaterCheck);
+    }
+	
 }
diff --git a/src/main/java/net/minecraft/world/entity/monster/piglin/Piglin.java b/src/main/java/net/minecraft/world/entity/monster/piglin/Piglin.java
index 758558c1e312edc730d1f5d7ffdbc5a41356a6e5..61db9173c37cbb0f3c249658aa3487f2a08c9692 100644
--- a/src/main/java/net/minecraft/world/entity/monster/piglin/Piglin.java
+++ b/src/main/java/net/minecraft/world/entity/monster/piglin/Piglin.java
@@ -200,7 +200,7 @@ public class Piglin extends AbstractPiglin implements CrossbowAttackMob, Invento
 
     @Override
     public boolean removeWhenFarAway(double distanceSquared) {
-        return !this.isPersistenceRequired();
+        return true || !this.isPersistenceRequired(); // Purpur - fix SPIGOT-6278
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/projectile/AbstractArrow.java b/src/main/java/net/minecraft/world/entity/projectile/AbstractArrow.java
index 52e4948fd1657fa1776ac6b0142e8c21e7567976..faaff82c658df8d67aac8b1a7c14b8b23ecd9229 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/AbstractArrow.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/AbstractArrow.java
@@ -308,7 +308,7 @@ public abstract class AbstractArrow extends Projectile {
         Vec3 vec3d = this.getDeltaMovement();
 
         this.setDeltaMovement(vec3d.multiply((double) (this.random.nextFloat() * 0.2F), (double) (this.random.nextFloat() * 0.2F), (double) (this.random.nextFloat() * 0.2F)));
-        this.life = 0;
+        //this.life = 0; // Purpur - do not reset despawn counter
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/entity/TheEndGatewayBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/TheEndGatewayBlockEntity.java
index 02b0b7b0c396f7a2af199261a262dc52235c6754..86f8505e5ad9e36fa6d58983cd264d433201b98e 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/TheEndGatewayBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/TheEndGatewayBlockEntity.java
@@ -178,6 +178,7 @@ public class TheEndGatewayBlockEntity extends TheEndPortalBlockEntity {
 
     public static void teleportEntity(Level world, BlockPos pos, BlockState state, Entity entity, TheEndGatewayBlockEntity blockEntity) {
         if (world instanceof ServerLevel && !blockEntity.isCoolingDown()) {
+			if (!entity.canChangeDimensions()) return; // Purpur
             ServerLevel worldserver = (ServerLevel) world;
 
             blockEntity.teleportCooldown = 100;
diff --git a/src/main/java/net/minecraft/world/phys/AABB.java b/src/main/java/net/minecraft/world/phys/AABB.java
index 68cc6f2a78a06293a29317fda72ab3ee79b3533a..22019fa6cdc7882c4d34116548fc567c4d731dc6 100644
--- a/src/main/java/net/minecraft/world/phys/AABB.java
+++ b/src/main/java/net/minecraft/world/phys/AABB.java
@@ -367,4 +367,11 @@ public class AABB {
     public static AABB ofSize(Vec3 center, double dx, double dy, double dz) {
         return new AABB(center.x - dx / 2.0D, center.y - dy / 2.0D, center.z - dz / 2.0D, center.x + dx / 2.0D, center.y + dy / 2.0D, center.z + dz / 2.0D);
     }
+	
+	// Purpur - tuinity added method
+    public final AABB offsetY(double dy) {
+        return new AABB(this.minX, this.minY + dy, this.minZ, this.maxX, this.maxY + dy, this.maxZ);
+    }
+    // Purpur
+	
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index e6d72a63ed0290f73f2808cbf45d4eaa04f8966a..56a1a9fe2f3089738c5293c35704dd007f2174ca 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -2526,6 +2526,7 @@ public final class CraftServer implements Server {
     @Override
     public double[] getTPS() {
         return new double[] {
+				net.minecraft.server.MinecraftServer.getServer().tps5s.getAverage(), // Purpur
                 net.minecraft.server.MinecraftServer.getServer().tps1.getAverage(),
                 net.minecraft.server.MinecraftServer.getServer().tps5.getAverage(),
                 net.minecraft.server.MinecraftServer.getServer().tps15.getAverage()
diff --git a/src/main/java/org/bukkit/craftbukkit/Main.java b/src/main/java/org/bukkit/craftbukkit/Main.java
index 5d0801fc73f5888398efd65cb5e9eabbdf7748e5..ea01acdaa727cd40fd3fdf4004a422af1f7dec10 100644
--- a/src/main/java/org/bukkit/craftbukkit/Main.java
+++ b/src/main/java/org/bukkit/craftbukkit/Main.java
@@ -269,7 +269,7 @@ public class Main {
                     System.setProperty(TerminalConsoleAppender.JLINE_OVERRIDE_PROPERTY, "false"); // Paper
                 }
 
-                if (Main.class.getPackage().getImplementationVendor() != null && System.getProperty("IReallyKnowWhatIAmDoingISwear") == null) {
+                if (false && Main.class.getPackage().getImplementationVendor() != null && System.getProperty("IReallyKnowWhatIAmDoingISwear") == null) {  // Purpur
                     Date buildDate = new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss Z").parse(Main.class.getPackage().getImplementationVendor()); // Paper
 
                     Calendar deadline = Calendar.getInstance();
diff --git a/src/main/java/org/bukkit/craftbukkit/command/VanillaCommandWrapper.java b/src/main/java/org/bukkit/craftbukkit/command/VanillaCommandWrapper.java
index 4aa1dc543950b5de64345b3403a6d0bc41c521df..23adb3b18a0fbe6b6c7cbc40d9f256495d6661f9 100644
--- a/src/main/java/org/bukkit/craftbukkit/command/VanillaCommandWrapper.java
+++ b/src/main/java/org/bukkit/craftbukkit/command/VanillaCommandWrapper.java
@@ -89,6 +89,7 @@ public final class VanillaCommandWrapper extends BukkitCommand {
     }
 
     public static String getPermission(CommandNode<CommandSourceStack> vanillaCommand) {
+		if (vanillaCommand.getPermission() != null) return vanillaCommand.getPermission(); // Purpur
         // Paper start
         final String commandName;
         if (vanillaCommand.getRedirect() == null) {
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index 755e3bcc4d620d5550cbfd7ba56e83816d270498..2176269aa602049d69ec65bb1c1629a6680ccfa2 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -1572,8 +1572,14 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
     @Override
     public boolean canSee(Player player) {
-        return !this.hiddenPlayers.containsKey(player.getUniqueId());
-    }
+        // Purpur start
+		return canSee(player.getUniqueId());
+    }
+	
+	public boolean canSee(UUID uuid) {
+		return !hiddenPlayers.containsKey(uuid);
+		// Purpur end
+	}
 
     @Override
     public Map<String, Object> serialize() {
diff --git a/src/main/java/org/bukkit/craftbukkit/legacy/CraftLegacy.java b/src/main/java/org/bukkit/craftbukkit/legacy/CraftLegacy.java
index b2a15c986c7500a0ce227a54cb61ec3f5378f6f3..513ee5e1129302e40b558f9ad4c4a7b5b30dc04c 100644
--- a/src/main/java/org/bukkit/craftbukkit/legacy/CraftLegacy.java
+++ b/src/main/java/org/bukkit/craftbukkit/legacy/CraftLegacy.java
@@ -255,6 +255,7 @@ public final class CraftLegacy {
     }
 
     static {
+		if (!wtf.etil.mirai.MiraiConfig.loggerSuppressInitLegacyMaterialError) // Purpur
         System.err.println("Initializing Legacy Material Support. Unless you have legacy plugins and/or data this is a bug!");
         if (MinecraftServer.getServer() != null && MinecraftServer.getServer().isDebugging()) {
             new Exception().printStackTrace();
diff --git a/src/main/java/org/spigotmc/TicksPerSecondCommand.java b/src/main/java/org/spigotmc/TicksPerSecondCommand.java
index 9bede6a26c08ede063c7a38f1149c811df14b258..088239d17aa8178cf8af09ec23cfd4deaaf2bbb6 100644
--- a/src/main/java/org/spigotmc/TicksPerSecondCommand.java
+++ b/src/main/java/org/spigotmc/TicksPerSecondCommand.java
@@ -31,7 +31,7 @@ public class TicksPerSecondCommand extends Command
         for ( int i = 0; i < tps.length; i++) {
             tpsAvg[i] = TicksPerSecondCommand.format( tps[i] );
         }
-        sender.sendMessage(ChatColor.GOLD + "TPS from last 1m, 5m, 15m: " + org.apache.commons.lang.StringUtils.join(tpsAvg, ", "));
+        sender.sendMessage(ChatColor.GOLD + "TPS from last 5s, 1m, 5m, 15m: " + org.apache.commons.lang.StringUtils.join(tpsAvg, ", ")); // Purpur
         if (args.length > 0 && args[0].equals("mem") && sender.hasPermission("bukkit.command.tpsmemory")) {
             sender.sendMessage(ChatColor.GOLD + "Current Memory Usage: " + ChatColor.GREEN + ((Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory()) / (1024 * 1024)) + "/" + (Runtime.getRuntime().totalMemory() / (1024 * 1024)) + " mb (Max: " + (Runtime.getRuntime().maxMemory() / (1024 * 1024)) + " mb)");
             if (!hasShownMemoryWarning) {
diff --git a/src/main/java/wtf/etil/mirai/MiraiConfig.java b/src/main/java/wtf/etil/mirai/MiraiConfig.java
index 8a90c513687651846758d846cae7f3386f462e70..ca61a8b5621f6e5d925bcab997950029e56a6813 100644
--- a/src/main/java/wtf/etil/mirai/MiraiConfig.java
+++ b/src/main/java/wtf/etil/mirai/MiraiConfig.java
@@ -1,10 +1,15 @@
 package wtf.etil.mirai;
 
+import co.aikar.timings.TimingsManager;
 import com.destroystokyo.paper.PaperCommand;
 import com.google.common.base.Throwables;
+import com.google.common.collect.ImmutableMap;
 import net.minecraft.server.MinecraftServer;
+import net.minecraft.world.entity.EntityDimensions;
+import net.minecraft.world.entity.EntityType;
 import org.bukkit.Bukkit;
 import org.bukkit.command.Command;
+import org.bukkit.configuration.ConfigurationSection;
 import org.bukkit.configuration.InvalidConfigurationException;
 import org.bukkit.configuration.file.YamlConfiguration;
 
@@ -204,4 +209,38 @@ public class MiraiConfig {
 		checkVehicleFlying = getBoolean("settings.checks.vehicle-flight", checkVehicleFlying);
 	}
 	
+	public static boolean dontSendUselessEntityPackets = true;
+	private static void dontSendUselessEntityPackets() {
+		dontSendUselessEntityPackets = getBoolean("settings.network.dont-send-useless-entity-packets", dontSendUselessEntityPackets);
+	}
+	
+	public static boolean useAlternateKeepAlive = true;
+	private static void useAlternateKeepAlive() {
+		useAlternateKeepAlive = getBoolean("settings.network.use-alternate-keepalive", useAlternateKeepAlive);
+	}
+	
+	public static boolean loggerSuppressInitLegacyMaterialError = true;
+	public static boolean loggerSuppressIgnoredAdvancementWarnings = true;
+	public static boolean loggerSuppressUnrecognizedRecipeErrors = true;
+	private static void loggerSettings() {
+		loggerSuppressInitLegacyMaterialError = getBoolean("settings.logger.suppress-init-legacy-material-errors", loggerSuppressInitLegacyMaterialError);
+		loggerSuppressIgnoredAdvancementWarnings = getBoolean("settings.logger.suppress-ignored-advancement-warnings", loggerSuppressIgnoredAdvancementWarnings);
+		loggerSuppressUnrecognizedRecipeErrors = getBoolean("settings.logger.suppress-unrecognized-recipe-errors", loggerSuppressUnrecognizedRecipeErrors);
+	}
+	
+	public static boolean playerFixStuckPortal = true;
+	private static void playerFixStuckPortal() {
+		playerFixStuckPortal = getBoolean("settings.fix-stuck-in-portal", playerFixStuckPortal);
+	}
+	
+	public static double squidOffsetWaterCheck = 0.0D;
+	private static void squidOffsetWaterCheck() {
+		squidOffsetWaterCheck = getDouble("settings.mobs.squid.water-offset-check", squidOffsetWaterCheck);
+	}
+	
+	public static boolean entitiesCanUsePortals = true;
+	private static void entitiesCanUsePortals() {
+		entitiesCanUsePortals = getBoolean("settings.entities-can-use-portals", entitiesCanUsePortals);
+	}
+	
 }
\ No newline at end of file
