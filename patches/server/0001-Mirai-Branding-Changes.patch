From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Etil <81570777+etil2jz@users.noreply.github.com>
Date: Fri, 17 Dec 2021 19:30:47 +0100
Subject: [PATCH] Mirai Branding Changes


diff --git a/build.gradle.kts b/build.gradle.kts
index 6ab5780bfd7aab71968ea8ba55187a5cce8c4c2c..d46b1c3d321e38fc42e6805500eae13e750ed9d7 100644
--- a/build.gradle.kts
+++ b/build.gradle.kts
@@ -18,7 +18,7 @@ repositories {
 }
 
 dependencies {
-    implementation(project(":pufferfish-api")) // Pufferfish // Paper
+    implementation(project(":mirai-api")) // Mirai // Pufferfish // Paper
     // Pufferfish start
     implementation("io.papermc.paper:paper-mojangapi:1.18.1-R0.1-SNAPSHOT") {
         exclude("io.papermc.paper", "paper-api")
@@ -80,7 +80,7 @@ tasks.jar {
         attributes(
             "Main-Class" to "org.bukkit.craftbukkit.Main",
             "Implementation-Title" to "CraftBukkit",
-            "Implementation-Version" to "git-Pufferfish-$implementationVersion", // Pufferfish
+            "Implementation-Version" to "git-Mirai-$implementationVersion", // Pufferfish
             "Implementation-Vendor" to date, // Paper
             "Specification-Title" to "Bukkit",
             "Specification-Version" to project.version,
diff --git a/src/main/java/com/destroystokyo/paper/Metrics.java b/src/main/java/com/destroystokyo/paper/Metrics.java
index f2fe6ea3719ff8b2913b7a3a939d7a5b75cb8b28..9045cb54813d26aba9f47dc999eb1d676cfb705b 100644
--- a/src/main/java/com/destroystokyo/paper/Metrics.java
+++ b/src/main/java/com/destroystokyo/paper/Metrics.java
@@ -593,7 +593,7 @@ public class Metrics {
             boolean logFailedRequests = config.getBoolean("logFailedRequests", false);
             // Only start Metrics, if it's enabled in the config
             if (config.getBoolean("enabled", true)) {
-                Metrics metrics = new Metrics("Pufferfish", serverUUID, logFailedRequests, Bukkit.getLogger()); // Pufferfish
+                Metrics metrics = new Metrics("Mirai", serverUUID, logFailedRequests, Bukkit.getLogger()); // Pufferfish
 
                 metrics.addCustomChart(new Metrics.SimplePie("minecraft_version", () -> {
                     String minecraftVersion = Bukkit.getVersion();
@@ -603,7 +603,7 @@ public class Metrics {
 
                 metrics.addCustomChart(new Metrics.SingleLineChart("players", () -> Bukkit.getOnlinePlayers().size()));
                 metrics.addCustomChart(new Metrics.SimplePie("online_mode", () -> Bukkit.getOnlineMode() ? "online" : "offline"));
-                metrics.addCustomChart(new Metrics.SimplePie("pufferfish_version", () -> (Metrics.class.getPackage().getImplementationVersion() != null) ? Metrics.class.getPackage().getImplementationVersion() : "unknown"));
+                metrics.addCustomChart(new Metrics.SimplePie("mirai_version", () -> (Metrics.class.getPackage().getImplementationVersion() != null) ? Metrics.class.getPackage().getImplementationVersion() : "unknown"));
 
                 metrics.addCustomChart(new Metrics.DrilldownPie("java_version", () -> {
                     Map<String, Map<String, Integer>> map = new HashMap<>();
diff --git a/src/main/java/com/destroystokyo/paper/console/PaperConsole.java b/src/main/java/com/destroystokyo/paper/console/PaperConsole.java
index e0b1f0671d16ddddcb6725acd25a1d1d69e42701..c5dc798bb272a94520404e0e14c17500d3d045ae 100644
--- a/src/main/java/com/destroystokyo/paper/console/PaperConsole.java
+++ b/src/main/java/com/destroystokyo/paper/console/PaperConsole.java
@@ -17,7 +17,7 @@ public final class PaperConsole extends SimpleTerminalConsole {
     @Override
     protected LineReader buildReader(LineReaderBuilder builder) {
         builder
-                .appName("Paper")
+                .appName("Mirai") // Mirai
                 .variable(LineReader.HISTORY_FILE, java.nio.file.Paths.get(".console_history"))
                 .completer(new ConsoleCommandCompleter(this.server))
                 .option(LineReader.Option.COMPLETE_IN_WORD, true);
diff --git a/src/main/java/gg/pufferfish/pufferfish/PufferfishVersionFetcher.java b/src/main/java/gg/pufferfish/pufferfish/PufferfishVersionFetcher.java
deleted file mode 100644
index adafc4fd661cf080b004b86c3eaed231a0133101..0000000000000000000000000000000000000000
--- a/src/main/java/gg/pufferfish/pufferfish/PufferfishVersionFetcher.java
+++ /dev/null
@@ -1,136 +0,0 @@
-package gg.pufferfish.pufferfish;
-
-import static net.kyori.adventure.text.Component.text;
-import static net.kyori.adventure.text.format.NamedTextColor.GREEN;
-import static net.kyori.adventure.text.format.NamedTextColor.RED;
-
-import com.destroystokyo.paper.VersionHistoryManager;
-import com.destroystokyo.paper.util.VersionFetcher;
-import com.google.gson.Gson;
-import com.google.gson.JsonObject;
-import java.io.IOException;
-import java.net.URI;
-import java.net.http.HttpClient;
-import java.net.http.HttpRequest;
-import java.net.http.HttpResponse;
-import java.nio.charset.StandardCharsets;
-import java.util.concurrent.TimeUnit;
-import java.util.logging.Level;
-import java.util.logging.Logger;
-import net.kyori.adventure.text.Component;
-import net.kyori.adventure.text.JoinConfiguration;
-import net.kyori.adventure.text.format.NamedTextColor;
-import net.kyori.adventure.text.format.TextDecoration;
-import org.bukkit.craftbukkit.CraftServer;
-import org.jetbrains.annotations.NotNull;
-import org.jetbrains.annotations.Nullable;
-
-public class PufferfishVersionFetcher implements VersionFetcher {
-	
-	private static final Logger LOGGER = Logger.getLogger("PufferfishVersionFetcher");
-	private static final HttpClient client = HttpClient.newHttpClient();
-	
-	private static final URI JENKINS_URI = URI.create("https://ci.pufferfish.host/job/Pufferfish-1.18/lastSuccessfulBuild/buildNumber");
-	private static final String GITHUB_FORMAT = "https://api.github.com/repos/pufferfish-gg/Pufferfish/compare/ver/1.18...%s";
-	
-	private static final HttpResponse.BodyHandler<JsonObject> JSON_OBJECT_BODY_HANDLER = responseInfo -> HttpResponse.BodySubscribers
-			.mapping(
-					HttpResponse.BodySubscribers.ofString(StandardCharsets.UTF_8),
-					string -> new Gson().fromJson(string, JsonObject.class)
-			);
-	
-	@Override
-	public long getCacheTime() {
-		return TimeUnit.MINUTES.toMillis(30);
-	}
-	
-	@Override
-	public @NotNull Component getVersionMessage(final @NotNull String serverVersion) {
-		final String[] parts = CraftServer.class.getPackage().getImplementationVersion().split("-");
-		@NotNull Component component;
-		
-		if (parts.length != 3) {
-			component = text("Unknown server version.", RED);
-		} else {
-			final String versionString = parts[2];
-			
-			try {
-				component = this.fetchJenkinsVersion(Integer.parseInt(versionString));
-			} catch (NumberFormatException e) {
-				component = this.fetchGithubVersion(versionString.substring(1, versionString.length() - 1));
-			}
-		}
-		
-		final @Nullable Component history = this.getHistory();
-		return history != null ? Component
-				.join(JoinConfiguration.noSeparators(), component, Component.newline(), this.getHistory()) : component;
-	}
-	
-	private @NotNull Component fetchJenkinsVersion(final int versionNumber) {
-		final HttpRequest request = HttpRequest.newBuilder(JENKINS_URI).build();
-		try {
-			final HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());
-			if (response.statusCode() != 200) {
-				return text("Received invalid status code (" + response.statusCode() + ") from server.", RED);
-			}
-			
-			int latestVersionNumber;
-			try {
-				latestVersionNumber = Integer.parseInt(response.body());
-			} catch (NumberFormatException e) {
-				LOGGER.log(Level.WARNING, "Received invalid response from Jenkins \"" + response.body() + "\".");
-				return text("Received invalid response from server.", RED);
-			}
-			
-			final int versionDiff = latestVersionNumber - versionNumber;
-			return this.getResponseMessage(versionDiff);
-		} catch (IOException | InterruptedException e) {
-			LOGGER.log(Level.WARNING, "Failed to look up version from Jenkins", e);
-			return text("Failed to retrieve version from server.", RED);
-		}
-	}
-	
-	// Based off code contributed by Techcable <Techcable@outlook.com> in Paper/GH-65
-	private @NotNull Component fetchGithubVersion(final @NotNull String hash) {
-		final URI uri = URI.create(String.format(GITHUB_FORMAT, hash));
-		final HttpRequest request = HttpRequest.newBuilder(uri).build();
-		try {
-			final HttpResponse<JsonObject> response = client.send(request, JSON_OBJECT_BODY_HANDLER);
-			if (response.statusCode() != 200) {
-				return text("Received invalid status code (" + response.statusCode() + ") from server.", RED);
-			}
-			
-			final JsonObject obj = response.body();
-			final int versionDiff = obj.get("behind_by").getAsInt();
-			
-			return this.getResponseMessage(versionDiff);
-		} catch (IOException | InterruptedException e) {
-			LOGGER.log(Level.WARNING, "Failed to look up version from GitHub", e);
-			return text("Failed to retrieve version from server.", RED);
-		}
-	}
-	
-	private @NotNull Component getResponseMessage(final int versionDiff) {
-		return switch (Math.max(-1, Math.min(1, versionDiff))) {
-			case -1 -> text("You are running an unsupported version of Pufferfish.", RED);
-			case 0 -> text("You are on the latest version!", GREEN);
-			default -> text("You are running " + versionDiff + " version" + (versionDiff == 1 ? "" : "s") + " beyond. " +
-							"Please update your server when possible to maintain stability, security, and receive the latest optimizations.",
-					RED);
-		};
-	}
-	
-	private @Nullable Component getHistory() {
-		final VersionHistoryManager.VersionData data = VersionHistoryManager.INSTANCE.getVersionData();
-		if (data == null) {
-			return null;
-		}
-		
-		final String oldVersion = data.getOldVersion();
-		if (oldVersion == null) {
-			return null;
-		}
-		
-		return Component.text("Previous version: " + oldVersion, NamedTextColor.GRAY, TextDecoration.ITALIC);
-	}
-}
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 1e7ae166a1d53fce28297e2eaebd11ec28a57a55..819fc4b53b5f2f9dc9c25641be644218d3d4f460 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -1711,7 +1711,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
 
     @DontObfuscate
     public String getServerModName() {
-        return "Pufferfish"; // Pufferfish - Pufferfish > // Paper - Paper > // Spigot - Spigot > // CraftBukkit - cb > vanilla!
+        return "Mirai"; // Mirai - Mirai > // Pufferfish - Pufferfish > // Paper - Paper > // Spigot - Spigot > // CraftBukkit - cb > vanilla!
     }
 
     public SystemReport fillSystemReport(SystemReport details) {
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 629af8db1547ead263c3d7aef8dfa44afbc985e8..c4ac908002171487cf5760788514fb3f1ef3cbdd 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -253,7 +253,7 @@ import javax.annotation.Nullable; // Paper
 import javax.annotation.Nonnull; // Paper
 
 public final class CraftServer implements Server {
-    private final String serverName = "Pufferfish"; // Paper // Pufferfish
+    private final String serverName = "Mirai"; // Paper // Pufferfish // Mirai
     private final String serverVersion;
     private final String bukkitVersion = Versioning.getBukkitVersion();
     private final Logger logger = Logger.getLogger("Minecraft");
diff --git a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
index cfa4b75b042e2a82e10e5dc95d4c71d39f5a8d60..54bac87a6bbf5a0a7ea65a4314e10e28a7e0be7a 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
@@ -394,7 +394,7 @@ public final class CraftMagicNumbers implements UnsafeValues {
 
     @Override
     public com.destroystokyo.paper.util.VersionFetcher getVersionFetcher() {
-        return new gg.pufferfish.pufferfish.PufferfishVersionFetcher(); // Pufferfish
+        return new com.destroystokyo.paper.PaperVersionFetcher(); // Mirai
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/util/Versioning.java b/src/main/java/org/bukkit/craftbukkit/util/Versioning.java
index 80553face9c70c2a3d897681e7761df85b22d464..ce2d17a9756f0375a96bbf7c56c3032c73d503f3 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/Versioning.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/Versioning.java
@@ -1,29 +1,9 @@
 package org.bukkit.craftbukkit.util;
 
-import java.io.IOException;
-import java.io.InputStream;
-import java.util.Properties;
-import java.util.logging.Level;
-import java.util.logging.Logger;
 import org.bukkit.Bukkit;
 
 public final class Versioning {
     public static String getBukkitVersion() {
-        String result = "Unknown-Version";
-
-        InputStream stream = Bukkit.class.getClassLoader().getResourceAsStream("META-INF/maven/gg.pufferfish.pufferfish/pufferfish-api/pom.properties"); // Pufferfish
-        Properties properties = new Properties();
-
-        if (stream != null) {
-            try {
-                properties.load(stream);
-
-                result = properties.getProperty("version");
-            } catch (IOException ex) {
-                Logger.getLogger(Versioning.class.getName()).log(Level.SEVERE, "Could not get Bukkit version!", ex);
-            }
-        }
-
-        return result;
+        return "1.18.1-R0.1-SNAPSHOT"; // Mirai - hardcode version, it's obviously 1.18.1
     }
 }
